{"version":3,"sources":["app.js","index.js"],"names":["express","require","path","app","https","fs","type","options","key","readFileSync","cert","server","createServer","io","use","static","join","__dirname","get","req","res","sendFile","resolve","console","log","on","socket","of","sockets","size","message","roomId","to","emit","videoStats","length","writeFile","convertToCsv","err","data","dcStats","in","fetchSockets","then","clientCount","rooms","forEach","arr","array","Object","keys","concat","map","it","values","toString","module","exports","port","listen"],"mappings":"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","file":"index.js","sourceRoot":"../src","sourcesContent":["const express = require('express');\r\nconst path = require('path');\r\nconst app = express();\r\nconst https = require('https');\r\nconst fs = require('fs');\r\nconst { type } = require('express/lib/response');\r\n\r\nconst options = {\r\n    key: fs.readFileSync('key.pem'),\r\n    cert: fs.readFileSync('cert.pem')\r\n};\r\n\r\nconst server = https.createServer(options, app);\r\n\r\nconst io = require('socket.io')(server);\r\n\r\napp.use(express.static(path.join(__dirname, 'public')));\r\n\r\napp.get('/', (req,res)=>{\r\n    res.sendFile(path.resolve(__dirname, \"public\",\"index.html\"));\r\n})\r\n\r\n\r\nconsole.log(\"initing socket event handlers\");\r\n\r\nio.on('connection', socket => {\r\n    console.log('new connection');\r\n    console.log('total sockets connected: ' +  io.of(\"/\").sockets.size);\r\n\r\n    socket.on('message', (message, roomId) => {\r\n        socket.to(roomId).emit('message', message);\r\n    })\r\n\r\n    socket.on('serverMessage', (message, roomId) => {\r\n        if (message.videoStats && message.videoStats.length > 0) {\r\n            fs.writeFile(roomId+'video_stats.txt', convertToCsv(message.videoStats), function (err, data) {\r\n                if (err) {\r\n                    return console.log(err);\r\n                }\r\n            });\r\n        }\r\n        if (message.dcStats && message.dcStats.length > 0) {\r\n            fs.writeFile(roomId+'data_channel_stats.txt', convertToCsv(message.dcStats), function (err, data) {\r\n                if (err) {\r\n                    return console.log(err);\r\n                }\r\n            });\r\n        }\r\n    }) \r\n\r\n    socket.on('join-room', roomId => {\r\n        console.log('new client joined room ' + roomId);\r\n\r\n        io.in(roomId).fetchSockets()\r\n            .then(sockets => {\r\n                const clientCount = sockets.length;\r\n                if (clientCount == 0) {\r\n                    console.log('creating room');\r\n\r\n                    socket.join(roomId);\r\n                    socket.emit('created', roomId);\r\n                } \r\n                else if (clientCount == 1) {\r\n                    console.log('2nd client joined');\r\n\r\n                    socket.to(roomId).emit('join', roomId);\r\n\r\n                    socket.join(roomId);\r\n                    socket.emit('joined', roomId);\r\n                }\r\n                else {\r\n                    console.log('Rejected a client, room full');\r\n\r\n                    socket.emit('full');\r\n                }\r\n            });\r\n    })\r\n    socket.on('disconnecting', () => {\r\n        // First element is socketId, so assume it was only part\r\n        // of the roomId on the last index\r\n        roomId = socket.rooms.forEach(roomId => {\r\n            io.to(roomId).emit('left');\r\n        });\r\n    });\r\n    socket.on('disconnect', () => {\r\n        console.log(`a user disconnected, total sockets remaining: ${io.of(\"/\").sockets.size}`);\r\n    });\r\n})\r\n\r\nconst convertToCsv = (arr) => {\r\n    const array = [Object.keys(arr[0])].concat(arr);\r\n\r\n    return array.map(it => {\r\n        return Object.values(it).toString()\r\n    }).join('\\n');\r\n}\r\n\r\n\r\n\r\n\r\nmodule.exports = server;","const app = require('./app');\r\n\r\nconst port = '8888'\r\n\r\napp.listen(port, '0.0.0.0', () => {\r\n  console.log(`Server is listening on port ${port}...`);\r\n});"]}